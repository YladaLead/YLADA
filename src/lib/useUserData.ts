'use client'

import { useEffect, useState } from 'react'

interface UserData {
  userId?: string
  userName?: string
  userPhone?: string
  linkId?: string
  customMessage?: string
  pageTitle?: string // T√≠tulo personalizado
  buttonText?: string // Texto do bot√£o personalizado
}

export function useUserData() {
  const [userData, setUserData] = useState<UserData | null>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    try {
      // Obter dados do usu√°rio da URL
      const urlParams = new URLSearchParams(window.location.search)
      const userParam = urlParams.get('user')
      
      console.log('üîç DEBUG useUserData:')
      console.log('  - window.location.search:', window.location.search)
      console.log('  - userParam:', userParam)
      
      if (userParam) {
        const parsedUserData = JSON.parse(userParam)
        console.log('üë§ Dados do usu√°rio carregados:', parsedUserData)
        console.log('  - customMessage:', parsedUserData.customMessage)
        setUserData(parsedUserData)
      } else {
        console.log('‚ö†Ô∏è Nenhum dado de usu√°rio encontrado na URL')
        console.log('‚ö†Ô∏è Usando fallback padr√£o')
        // Fallback para dados padr√£o - SEM TELEFONE FIXO
        console.log('‚ö†Ô∏è Usando fallback SEM telefone fixo')
        setUserData({
          userId: 'default',
          userName: 'Especialista',
          userPhone: '', // SEM telefone fixo - deve ser fornecido pela URL
          linkId: 'default',
          customMessage: 'Quer receber orienta√ß√µes personalizadas? Clique abaixo e fale comigo!'
        })
      }
    } catch (error) {
      console.error('‚ùå Erro ao carregar dados do usu√°rio:', error)
      console.log('‚ùå Usando fallback de erro')
      // Fallback para dados padr√£o - SEM TELEFONE FIXO
      setUserData({
        userId: 'default',
        userName: 'Especialista',
        userPhone: '', // SEM telefone fixo - deve ser fornecido pela URL
        linkId: 'default',
        customMessage: 'Quer receber orienta√ß√µes personalizadas? Clique abaixo e fale comigo!'
      })
    } finally {
      setLoading(false)
    }
  }, [])

  const getWhatsAppUrl = (message?: string) => {
    // Usar mensagem personalizada se dispon√≠vel, sen√£o usar a mensagem passada como par√¢metro
    const finalMessage = userData?.customMessage || message || 'Quer receber orienta√ß√µes personalizadas? Clique abaixo e fale comigo!'
    
    console.log('üîç Debug getWhatsAppUrl:')
    console.log('  - userData:', userData)
    console.log('  - userPhone:', userData?.userPhone)
    console.log('  - customMessage:', userData?.customMessage)
    console.log('  - finalMessage:', finalMessage)
    
    if (!userData?.userPhone) {
      console.log('‚ö†Ô∏è SEM TELEFONE - n√£o √© poss√≠vel gerar URL do WhatsApp')
      return '#'
    }
    
    // Usar o telefone exatamente como est√° no banco (j√° com c√≥digo do pa√≠s)
    const cleanPhone = userData.userPhone.replace(/\D/g, '')
    
    console.log('‚úÖ Usando telefone do usu√°rio:', cleanPhone)
    return `https://wa.me/${cleanPhone}?text=${encodeURIComponent(finalMessage)}`
  }

  const getCustomMessage = () => {
    const message = userData?.customMessage || 'Quer receber orienta√ß√µes personalizadas? Clique abaixo e fale comigo!'
    console.log('üîç Debug getCustomMessage:')
    console.log('  - userData:', userData)
    console.log('  - customMessage:', userData?.customMessage)
    console.log('  - final message:', message)
    return message
  }

  const getPageTitle = () => {
    return userData?.pageTitle || 'Quer uma an√°lise mais completa?'
  }

  const getButtonText = () => {
    return userData?.buttonText || 'Consultar Especialista'
  }

  return {
    userData,
    loading,
    getWhatsAppUrl,
    getCustomMessage,
    getPageTitle,
    getButtonText
  }
}
