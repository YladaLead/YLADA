'use client'

import React, { useState, useRef, useEffect } from 'react'
import { UserProfile, AssistantResponse } from '@/lib/openai-assistant-specialized'

interface Message {
  id: string
  type: 'user' | 'assistant'
  content: string
  timestamp: Date
  feedback?: 'positive' | 'negative' | 'neutral'
}

interface ChatInterfaceProps {
  onComplete: (profile: UserProfile) => void
}

export default function ChatInterface({ onComplete }: ChatInterfaceProps) {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'assistant',
      content: 'Ol√° üëã Sou a YLADA! Vou criar sua ferramenta de leads em 60 segundos.\n\n**Para come√ßar, me conte:**\n‚Ä¢ Qual √© sua profiss√£o? (ex: nutricionista, personal trainer, coach...)\n‚Ä¢ Qual seu objetivo principal? (atrair clientes, vender produtos, gerar leads...)\n\nPode responder tudo de uma vez! üöÄ',
      timestamp: new Date()
    }
  ])
  const [inputValue, setInputValue] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const [userProfile, setUserProfile] = useState<UserProfile>({})
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  // Gerar sugest√µes espec√≠ficas baseadas no perfil completo
  const generateSpecificSuggestions = (profession: string, specialization: string, objective: string): string => {
    if (profession === 'nutricionista') {
      if (specialization === 'emagrecimento') {
        return `
1Ô∏è‚É£ **Quiz "Descubra seu Perfil Metab√≥lico"** - identifica tipo metab√≥lico para emagrecimento personalizado
2Ô∏è‚É£ **Calculadora "Seu D√©ficit Cal√≥rico Ideal"** - calcula d√©ficit perfeito para perda de peso sustent√°vel
3Ô∏è‚É£ **Diagn√≥stico "Avalie sua Rela√ß√£o com a Comida"** - identifica padr√µes alimentares e gatilhos
4Ô∏è‚É£ **Checklist "Plano de Emagrecimento em 30 Dias"** - guia passo a passo para mudan√ßa de h√°bitos
5Ô∏è‚É£ **Simulador "Seu Peso Ideal"** - projeta resultados baseados no estilo de vida atual`
      } else if (specialization === 'nutri√ß√£o esportiva') {
        return `
1Ô∏è‚É£ **Quiz "Seu Perfil de Performance"** - identifica necessidades nutricionais para esporte
2Ô∏è‚É£ **Calculadora "Suas Necessidades Proteicas"** - calcula prote√≠na ideal para objetivos
3Ô∏è‚É£ **Diagn√≥stico "Recupera√ß√£o e Hidrata√ß√£o"** - avalia estrat√©gias de recupera√ß√£o
4Ô∏è‚É£ **Planner "Nutri√ß√£o Pr√©/P√≥s Treino"** - planeja refei√ß√µes para performance
5Ô∏è‚É£ **Ranking "Seu N√≠vel de Hidrata√ß√£o"** - avalia e melhora hidrata√ß√£o esportiva`
      } else if (specialization === 'comportamento alimentar') {
        return `
1Ô∏è‚É£ **Quiz "Seu Perfil Comportamental"** - identifica padr√µes e gatilhos alimentares
2Ô∏è‚É£ **Diagn√≥stico "Rela√ß√£o com a Comida"** - avalia sa√∫de emocional e alimentar
3Ô∏è‚É£ **Checklist "Mindful Eating"** - guia para comer com consci√™ncia
4Ô∏è‚É£ **Simulador "Seus Gatilhos Alimentares"** - identifica situa√ß√µes de risco
5Ô∏è‚É£ **Planner "Refei√ß√µes Conscientes"** - planeja refei√ß√µes com foco no bem-estar`
      }
    } else if (profession === 'personal trainer') {
      if (specialization === 'muscula√ß√£o') {
        return `
1Ô∏è‚É£ **Quiz "Seu Perfil de For√ßa"** - identifica n√≠vel e objetivos de muscula√ß√£o
2Ô∏è‚É£ **Calculadora "Volume de Treino Ideal"** - calcula s√©ries e repeti√ß√µes personalizadas
3Ô∏è‚É£ **Diagn√≥stico "Recupera√ß√£o Muscular"** - avalia tempo de descanso ideal
4Ô∏è‚É£ **Planner "Periodiza√ß√£o"** - planeja ciclos de treino para hipertrofia
5Ô∏è‚É£ **Ranking "Seu Progresso"** - acompanha evolu√ß√£o de for√ßa e massa`
      } else if (specialization === 'funcional e mobilidade') {
        return `
1Ô∏è‚É£ **Quiz "Seu N√≠vel de Mobilidade"** - identifica limita√ß√µes e potencial
2Ô∏è‚É£ **Diagn√≥stico "Movimento Funcional"** - avalia padr√µes de movimento
3Ô∏è‚É£ **Checklist "Rotina de Mobilidade"** - guia para melhorar flexibilidade
4Ô∏è‚É£ **Desafio "7 Dias de Movimento"** - desafio para incorporar movimento
5Ô∏è‚É£ **Planner "Treino Funcional"** - planeja exerc√≠cios funcionais`
      }
    } else if (profession === 'coach') {
      if (specialization === 'life coaching') {
        return `
1Ô∏è‚É£ **Quiz "Seu Perfil de Desenvolvimento"** - identifica √°reas de crescimento
2Ô∏è‚É£ **Diagn√≥stico "Mapa da Clareza Mental"** - avalia clareza de objetivos
3Ô∏è‚É£ **Checklist "Transforma√ß√£o em 30 Dias"** - guia para mudan√ßas pessoais
4Ô∏è‚É£ **Planner "Metas Inteligentes"** - planeja objetivos alcan√ß√°veis
5Ô∏è‚É£ **Simulador "Seu Futuro Ideal"** - projeta vida desejada`
      } else if (specialization === 'executive coaching') {
        return `
1Ô∏è‚É£ **Quiz "Seu Perfil de Lideran√ßa"** - identifica estilo de lideran√ßa
2Ô∏è‚É£ **Diagn√≥stico "Compet√™ncias Executivas"** - avalia habilidades de gest√£o
3Ô∏è‚É£ **Checklist "Lideran√ßa Eficaz"** - guia para melhorar lideran√ßa
4Ô∏è‚É£ **Planner "Desenvolvimento Executivo"** - planeja crescimento profissional
5Ô∏è‚É£ **Ranking "Performance de Equipe"** - avalia e melhora performance`
      }
    }
    
    // Fallback gen√©rico
    return `
1Ô∏è‚É£ **Quiz Personalizado** - identifica necessidades espec√≠ficas
2Ô∏è‚É£ **Calculadora Inteligente** - calcula m√©tricas importantes
3Ô∏è‚É£ **Diagn√≥stico Completo** - avalia situa√ß√£o atual
4Ô∏è‚É£ **Checklist de A√ß√£o** - guia passo a passo
5Ô∏è‚É£ **Planner Personalizado** - planeja estrat√©gias espec√≠ficas`
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: inputValue,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    const currentInput = inputValue
    setInputValue('')
    setIsTyping(true)

    // Usar IA especializada YLADA Health
    console.log('ü§ñ Usando YLADA Health Specialized')
    
    try {
      const response = await fetch('/api/ylada-assistant', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: currentInput,
          userProfile,
          threadId: null
        })
      })

      if (response.ok) {
        const data = await response.json()
        const assistantMessage: Message = {
          id: (Date.now() + 1).toString(),
          type: 'assistant',
          content: data.message,
          timestamp: new Date()
        }
        
        setMessages(prev => [...prev, assistantMessage])
        
        // N√ÉO chamar onComplete automaticamente - aguardar escolha do usu√°rio
        // if (data.complete && data.profile) {
        //   setTimeout(() => {
        //     onComplete(data.profile)
        //   }, 2000)
        // }
        
        setIsTyping(false)
        return
      }
    } catch (error) {
      console.error('Erro ao chamar IA especializada:', error)
    }
    
    // Fallback local se a API falhar
    console.log('üéØ Usando fallback local (API falhou)')
    
    // Simular delay de processamento
    await new Promise(resolve => setTimeout(resolve, 800))
    
    // Fallback inteligente local
    const input = currentInput.toLowerCase()
    
    // Usar informa√ß√µes j√° detectadas anteriormente + nova entrada
    let detectedProfession = userProfile.profissao || ''
    let detectedObjective = userProfile.objetivo_principal || ''
    
    // Detectar profiss√µes (s√≥ se ainda n√£o foi detectada)
    if (!detectedProfession) {
      if (input.includes('nutricionista') || input.includes('nutri√ß√£o') || input.includes('nutricao')) {
        detectedProfession = 'nutricionista'
      } else if (input.includes('personal trainer') || input.includes('educador f√≠sico') || input.includes('personal')) {
        detectedProfession = 'personal trainer'
      } else if (input.includes('fisioterapeuta') || input.includes('fisio')) {
        detectedProfession = 'fisioterapeuta'
      } else if (input.includes('coach') || input.includes('mentor')) {
        detectedProfession = 'coach'
      } else if (input.includes('esteticista') || input.includes('est√©tica')) {
        detectedProfession = 'esteticista'
      }
    }
    
    // Detectar objetivos (s√≥ se ainda n√£o foi detectado)
    if (!detectedObjective) {
      if (input.includes('atrair') || input.includes('novos clientes') || input.includes('leads') || 
          input.includes('cliente') || input.includes('agenda vazia') || input.includes('mais cliente') ||
          input.includes('ter mais') || input.includes('conseguir cliente') || input.includes('buscar cliente')) {
        detectedObjective = 'atrair novos clientes'
      } else if (input.includes('vender') || input.includes('produtos') || input.includes('vendas')) {
        detectedObjective = 'vender produtos/servi√ßos'
      } else if (input.includes('engajar') || input.includes('fidelizar') || input.includes('manter')) {
        detectedObjective = 'engajar clientes atuais'
      } else if (input.includes('educar') || input.includes('conhecimento') || input.includes('autoridade')) {
        detectedObjective = 'educar e gerar valor'
      }
    }
    
    // Detectar especializa√ß√£o
    let detectedSpecialization = userProfile.especializacao || ''
    if (!detectedSpecialization) {
      if (input.includes('emagrecimento') || input.includes('perda de peso') || input.includes('emagrecer')) {
        detectedSpecialization = 'emagrecimento'
      } else if (input.includes('esportiva') || input.includes('atleta') || input.includes('performance')) {
        detectedSpecialization = 'nutri√ß√£o esportiva'
      } else if (input.includes('materno') || input.includes('gesta√ß√£o') || input.includes('infantil')) {
        detectedSpecialization = 'materno-infantil'
      } else if (input.includes('comportamento') || input.includes('rela√ß√£o') || input.includes('comida')) {
        detectedSpecialization = 'comportamento alimentar'
      } else if (input.includes('cl√≠nica') || input.includes('doen√ßa') || input.includes('condi√ß√£o')) {
        detectedSpecialization = 'nutri√ß√£o cl√≠nica'
      } else if (input.includes('muscula√ß√£o') || input.includes('hipertrofia') || input.includes('for√ßa')) {
        detectedSpecialization = 'muscula√ß√£o'
      } else if (input.includes('cardio') || input.includes('condicionamento') || input.includes('resist√™ncia')) {
        detectedSpecialization = 'cardio e condicionamento'
      } else if (input.includes('reabilita√ß√£o') || input.includes('les√£o') || input.includes('recupera√ß√£o')) {
        detectedSpecialization = 'reabilita√ß√£o'
      } else if (input.includes('funcional') || input.includes('mobilidade') || input.includes('movimento')) {
        detectedSpecialization = 'funcional e mobilidade'
      } else if (input.includes('life coaching') || input.includes('desenvolvimento pessoal')) {
        detectedSpecialization = 'life coaching'
      } else if (input.includes('executive') || input.includes('lideran√ßa') || input.includes('carreira')) {
        detectedSpecialization = 'executive coaching'
      } else if (input.includes('financeiro') || input.includes('dinheiro') || input.includes('investimento')) {
        detectedSpecialization = 'coaching financeiro'
      } else if (input.includes('mindfulness') || input.includes('bem-estar mental')) {
        detectedSpecialization = 'mindfulness'
      }
    }
    
    // Detectar p√∫blico-alvo
    let detectedAudience = userProfile.publico_alvo || ''
    if (!detectedAudience) {
      if (input.includes('iniciante') || input.includes('come√ßando') || input.includes('novato')) {
        detectedAudience = 'iniciantes'
      } else if (input.includes('intermedi√°rio') || input.includes('experi√™ncia') || input.includes('m√©dio')) {
        detectedAudience = 'intermedi√°rios'
      } else if (input.includes('avan√ßado') || input.includes('otimiza√ß√£o') || input.includes('expert')) {
        detectedAudience = 'avan√ßados'
      } else if (input.includes('todos') || input.includes('misto') || input.includes('geral')) {
        detectedAudience = 'todos os n√≠veis'
      }
    }
    
    // Detectar escolha de ferramenta espec√≠fica
    let selectedTool = ''
    if (input.includes('quiz') || input.includes('perfil metab√≥lico') || input.includes('perfil nutricional') || 
        input.includes('1') || input.includes('primeira') || input.includes('primeiro')) {
      selectedTool = 'quiz'
    } else if (input.includes('calculadora') || input.includes('d√©ficit cal√≥rico') || input.includes('treino ideal') ||
               input.includes('2') || input.includes('segunda') || input.includes('segundo')) {
      selectedTool = 'calculadora'
    } else if (input.includes('diagn√≥stico') || input.includes('rela√ß√£o com a comida') || input.includes('clareza mental') ||
               input.includes('3') || input.includes('terceira') || input.includes('terceiro')) {
      selectedTool = 'diagnostico'
    } else if (input.includes('desafio') || input.includes('7 dias') || input.includes('foco total')) {
      selectedTool = 'desafio'
    } else if (input.includes('checklist') || input.includes('30 dias') || input.includes('transforma√ß√£o')) {
      selectedTool = 'checklist'
    } else if (input.includes('ranking') || input.includes('n√≠vel de fitness')) {
      selectedTool = 'ranking'
    }
    
    // Detectar confirma√ß√£o do usu√°rio
    let userConfirmation = ''
    if (input.includes('sim') || input.includes('confirmo') || input.includes('criar') || input.includes('vamos')) {
      userConfirmation = 'sim'
    } else if (input.includes('n√£o') || input.includes('nao') || input.includes('cancelar')) {
      userConfirmation = 'n√£o'
    }
    
    // Detectar escolha de CTA
    let selectedCTA = ''
    if (input.includes('formul√°rio') || input.includes('formulario') || input.includes('contato') || input.includes('1')) {
      selectedCTA = 'formulario'
    } else if (input.includes('whatsapp') || input.includes('zap') || input.includes('2')) {
      selectedCTA = 'whatsapp'
    } else if (input.includes('agendamento') || input.includes('agenda') || input.includes('3')) {
      selectedCTA = 'agendamento'
    } else if (input.includes('site') || input.includes('p√°gina') || input.includes('pagina') || input.includes('4')) {
      selectedCTA = 'site'
    } else if (input.includes('email') || input.includes('5')) {
      selectedCTA = 'email'
    }
    
    // Atualizar perfil com novas informa√ß√µes detectadas
    if (detectedProfession || detectedObjective || detectedSpecialization || detectedAudience) {
      setUserProfile(prev => ({
        ...prev,
        ...(detectedProfession && { profissao: detectedProfession }),
        ...(detectedObjective && { objetivo_principal: detectedObjective }),
        ...(detectedSpecialization && { especializacao: detectedSpecialization }),
        ...(detectedAudience && { publico_alvo: detectedAudience })
      }))
    }
    
    let fallbackContent = ''
    
    // Gerar resposta baseada no que foi detectado
    if (detectedProfession && detectedObjective && selectedTool && userConfirmation === 'sim' && selectedCTA) {
      // Usu√°rio confirmou e escolheu CTA - criar ferramenta agora!
      fallbackContent = `Perfeito! Vou criar sua **${selectedTool}** personalizada para ${detectedProfession}!

üöÄ **Gerando sua ferramenta...**

${selectedTool === 'quiz' ? 'üß© Criando Quiz personalizado com perguntas inteligentes...' :
  selectedTool === 'calculadora' ? 'üßÆ Criando Calculadora com f√≥rmulas especializadas...' :
  selectedTool === 'diagnostico' ? 'üìä Criando Diagn√≥stico com an√°lise completa...' :
  selectedTool === 'desafio' ? 'üèãÔ∏è Criando Desafio com cronograma personalizado...' :
  selectedTool === 'checklist' ? 'üìã Criando Checklist com tarefas espec√≠ficas...' :
  'üìà Criando Ranking com m√©tricas personalizadas...'}

${selectedCTA === 'formulario' ? 'üìù Adicionando formul√°rio de contato...' :
  selectedCTA === 'whatsapp' ? 'üí¨ Configurando bot√£o do WhatsApp...' :
  selectedCTA === 'agendamento' ? 'üìÖ Integrando sistema de agendamento...' :
  selectedCTA === 'site' ? 'üåê Configurando redirecionamento para site...' :
  'üìß Configurando captura de email...'}

Aguarde alguns segundos... ‚è≥`

      // Criar ferramenta com a escolha espec√≠fica
      const newProfile = {
        profissao: detectedProfession,
        objetivo_principal: detectedObjective,
        especializacao: detectedSpecialization || 'geral',
        publico_alvo: detectedAudience || 'novos clientes',
        tipo_ferramenta: selectedTool,
        cta_tipo: selectedCTA
      }
      
      setUserProfile(newProfile)
      
      // Criar ap√≥s delay apenas quando usu√°rio confirma e escolhe CTA
      setTimeout(() => {
        onComplete(newProfile)
      }, 3000)
      
    } else if (detectedProfession && detectedObjective && selectedTool && userConfirmation === 'sim') {
      // Usu√°rio confirmou - agora escolher CTA
      fallbackContent = `√ìtimo! Agora preciso saber: **o que voc√™ quer que aconte√ßa quando algu√©m completar sua ferramenta?**

üéØ **Escolha seu Call-to-Action (CTA):**

1Ô∏è‚É£ **üìù Formul√°rio de Contato** - coleta dados e permite contato direto
2Ô∏è‚É£ **üí¨ WhatsApp** - redireciona para conversa no WhatsApp
3Ô∏è‚É£ **üìÖ Agendamento** - permite agendar consulta/sess√£o
4Ô∏è‚É£ **üåê Site/P√°gina** - redireciona para seu site ou landing page
5Ô∏è‚É£ **üìß Captura de Email** - coleta email para newsletter/lista

**Qual dessas op√ß√µes voc√™ prefere?**

Digite o **n√∫mero** (1, 2, 3, 4, 5) ou o **nome** da op√ß√£o.

üí° **Dica:** Formul√°rio e WhatsApp s√£o os mais eficazes para convers√£o!`
      
    } else if (detectedProfession && detectedObjective && selectedTool) {
      // Usu√°rio escolheu uma ferramenta espec√≠fica - confirmar antes de criar
      fallbackContent = `Perfeito! Voc√™ escolheu criar um **${selectedTool}** para ${detectedProfession}!

üéØ **Confirma√ß√£o Final:**

**Ferramenta:** ${selectedTool}
**Profiss√£o:** ${detectedProfession}
**Objetivo:** ${detectedObjective}
${detectedSpecialization ? `**Especializa√ß√£o:** ${detectedSpecialization}` : ''}
${detectedAudience ? `**P√∫blico:** ${detectedAudience}` : ''}

**Voc√™ confirma que quer criar esta ferramenta?**

Digite **"sim"** para criar ou **"n√£o"** para escolher outra op√ß√£o.

üöÄ **Em 60 segundos voc√™ ter√° sua ferramenta pronta!**`

      // N√ÉO criar automaticamente - aguardar confirma√ß√£o
      const newProfile = {
        profissao: detectedProfession,
        objetivo_principal: detectedObjective,
        especializacao: detectedSpecialization || 'geral',
        publico_alvo: detectedAudience || 'novos clientes',
        tipo_ferramenta: selectedTool
      }
      
      setUserProfile(newProfile)
      
    } else if (detectedProfession && detectedObjective && detectedSpecialization) {
      // Temos informa√ß√µes completas - gerar sugest√µes espec√≠ficas
      fallbackContent = `Excelente! Agora tenho o perfil completo:

üë©‚Äç‚öïÔ∏è **Profiss√£o:** ${detectedProfession}
üéØ **Objetivo:** ${detectedObjective}
üî¨ **Especializa√ß√£o:** ${detectedSpecialization}
${detectedAudience ? `üë• **P√∫blico:** ${detectedAudience}` : ''}

üéØ **Aqui est√£o as ferramentas PERFEITAS para voc√™:**

${this.generateSpecificSuggestions(detectedProfession, detectedSpecialization, detectedObjective)}

**Qual dessas ferramentas voc√™ gostaria de criar primeiro?**

Voc√™ pode:
‚Ä¢ Digitar o **nome** da ferramenta
‚Ä¢ Digitar o **n√∫mero** da op√ß√£o (1, 2, 3, 4, 5)
‚Ä¢ Digitar **"primeira"**, **"segunda"**, etc.
‚Ä¢ Ou me conte **sua pr√≥pria ideia**! üí°

Escolha uma e eu criarei para voc√™! üöÄ`
      
    } else if (detectedProfession && detectedObjective) {
      // Usu√°rio forneceu profiss√£o e objetivo - fazer perguntas consultivas
      fallbackContent = `Perfeito! Entendi que voc√™ √© **${detectedProfession}** e quer **${detectedObjective}**.

üéØ **Para criar a ferramenta PERFEITA para voc√™, preciso entender melhor:**

**1. Qual √© sua especializa√ß√£o?**
${detectedProfession === 'nutricionista' ? `
‚Ä¢ ü•ó **Emagrecimento** - perda de peso e composi√ß√£o corporal
‚Ä¢ üèÉ **Nutri√ß√£o Esportiva** - performance e recupera√ß√£o
‚Ä¢ üë∂ **Nutri√ß√£o Materno-Infantil** - gesta√ß√£o e primeira inf√¢ncia
‚Ä¢ üß† **Comportamento Alimentar** - rela√ß√£o com a comida
‚Ä¢ üè• **Nutri√ß√£o Cl√≠nica** - doen√ßas e condi√ß√µes espec√≠ficas
` : detectedProfession === 'personal trainer' ? `
‚Ä¢ üí™ **Muscula√ß√£o** - hipertrofia e for√ßa
‚Ä¢ üèÉ **Cardio e Condicionamento** - resist√™ncia e sa√∫de
‚Ä¢ üë©‚Äçü¶Ω **Reabilita√ß√£o** - recupera√ß√£o de les√µes
‚Ä¢ üßò **Funcional e Mobilidade** - movimento e equil√≠brio
‚Ä¢ üèÜ **Performance Esportiva** - atletas e competi√ß√µes
` : detectedProfession === 'coach' ? `
‚Ä¢ üß† **Life Coaching** - desenvolvimento pessoal
‚Ä¢ üíº **Executive Coaching** - lideran√ßa e carreira
‚Ä¢ üí∞ **Financeiro** - educa√ß√£o financeira
‚Ä¢ üèÉ **Performance** - metas e produtividade
‚Ä¢ üßò **Mindfulness** - bem-estar mental
` : `
‚Ä¢ üéØ **Especializa√ß√£o espec√≠fica** - me conte sua √°rea
‚Ä¢ üí° **Sua ideia** - o que voc√™ tem em mente?
`}

**2. Qual seu p√∫blico principal?**
‚Ä¢ üë• **Iniciantes** - pessoas come√ßando na √°rea
‚Ä¢ üéØ **Intermedi√°rios** - j√° t√™m alguma experi√™ncia
‚Ä¢ üèÜ **Avan√ßados** - buscam otimiza√ß√£o
‚Ä¢ üåü **Todos os n√≠veis** - p√∫blico misto

**3. Como voc√™ prefere se comunicar?**
‚Ä¢ üì± **Digital** - redes sociais, WhatsApp
‚Ä¢ üè¢ **Presencial** - consult√≥rio, cl√≠nica
‚Ä¢ üìö **Educativo** - workshops, cursos
‚Ä¢ üõí **Vendas** - produtos, servi√ßos

**Me conte sobre sua especializa√ß√£o e p√∫blico para eu sugerir as melhores ferramentas!** üöÄ`

      // Atualizar perfil mas N√ÉO finalizar automaticamente
      const newProfile = {
        profissao: detectedProfession,
        objetivo_principal: detectedObjective,
        especializacao: 'geral',
        publico_alvo: 'novos clientes',
        tipo_ferramenta: 'quiz'
      }
      
      setUserProfile(newProfile)
      
    } else if (detectedProfession && !detectedObjective) {
      // S√≥ detectou profiss√£o - perguntar objetivo
      fallbackContent = `√ìtimo! Vejo que voc√™ √© **${detectedProfession}**.

Agora me conte: **qual √© seu objetivo principal** com essa ferramenta?

‚Ä¢ üéØ **Atrair novos clientes** - pessoas interessadas em seus servi√ßos
‚Ä¢ ü§ù **Engajar clientes atuais** - manter relacionamento e fidelidade  
‚Ä¢ üåü **Gerar indica√ß√µes** - transformar clientes em promotores
‚Ä¢ üõí **Vender produtos/servi√ßos** - aumentar vendas e convers√£o
‚Ä¢ üìò **Educar e gerar valor** - mostrar autoridade e conhecimento

**Qual desses objetivos mais se alinha com o que voc√™ quer criar hoje?**`
      
    } else if (detectedObjective && !detectedProfession) {
      // S√≥ detectou objetivo - mas pode j√° ter profiss√£o no perfil
      if (userProfile.profissao) {
        // J√° tem profiss√£o no perfil - ir direto para perguntas consultivas
        fallbackContent = `Perfeito! Entendi que voc√™ √© **${userProfile.profissao}** e quer **${detectedObjective}**.

üéØ **Para criar a ferramenta PERFEITA para voc√™, preciso entender melhor:**

**1. Qual √© sua especializa√ß√£o?**
${userProfile.profissao === 'nutricionista' ? `
‚Ä¢ ü•ó **Emagrecimento** - perda de peso e composi√ß√£o corporal
‚Ä¢ üèÉ **Nutri√ß√£o Esportiva** - performance e recupera√ß√£o
‚Ä¢ üë∂ **Nutri√ß√£o Materno-Infantil** - gesta√ß√£o e primeira inf√¢ncia
‚Ä¢ üß† **Comportamento Alimentar** - rela√ß√£o com a comida
‚Ä¢ üè• **Nutri√ß√£o Cl√≠nica** - doen√ßas e condi√ß√µes espec√≠ficas
` : userProfile.profissao === 'personal trainer' ? `
‚Ä¢ üí™ **Muscula√ß√£o** - hipertrofia e for√ßa
‚Ä¢ üèÉ **Cardio e Condicionamento** - resist√™ncia e sa√∫de
‚Ä¢ üë©‚Äçü¶Ω **Reabilita√ß√£o** - recupera√ß√£o de les√µes
‚Ä¢ üßò **Funcional e Mobilidade** - movimento e equil√≠brio
‚Ä¢ üèÜ **Performance Esportiva** - atletas e competi√ß√µes
` : `
‚Ä¢ üéØ **Especializa√ß√£o espec√≠fica** - me conte sua √°rea
‚Ä¢ üí° **Sua ideia** - o que voc√™ tem em mente?
`}

**2. Qual seu p√∫blico principal?**
‚Ä¢ üë• **Iniciantes** - pessoas come√ßando na √°rea
‚Ä¢ üéØ **Intermedi√°rios** - j√° t√™m alguma experi√™ncia
‚Ä¢ üèÜ **Avan√ßados** - buscam otimiza√ß√£o
‚Ä¢ üåü **Todos os n√≠veis** - p√∫blico misto

**Me conte sobre sua especializa√ß√£o e p√∫blico para eu sugerir as melhores ferramentas!** üöÄ`
      } else {
        // N√£o tem profiss√£o - perguntar profiss√£o
        fallbackContent = `Perfeito! Entendi que voc√™ quer **${detectedObjective}**.

Agora me conte: **qual √© sua profiss√£o ou √°rea de atua√ß√£o?**

‚Ä¢ ü•ó **Nutricionista** - especialista em alimenta√ß√£o e sa√∫de
‚Ä¢ üèãÔ∏è **Personal Trainer** - especialista em exerc√≠cios e fitness
‚Ä¢ ü©∫ **Fisioterapeuta** - especialista em reabilita√ß√£o e movimento
‚Ä¢ üß† **Coach** - especialista em desenvolvimento pessoal
‚Ä¢ üíÜ **Esteticista** - especialista em beleza e bem-estar
‚Ä¢ ‚ú® **Outro** - me conte sua profiss√£o espec√≠fica

**Qual √© sua √°rea de atua√ß√£o?**`
      }
      
    } else {
      // N√£o detectou nada espec√≠fico - pergunta mais direta
      fallbackContent = `Entendi! Para criar a ferramenta perfeita para voc√™, preciso saber:

**1. Qual √© sua profiss√£o?** (ex: nutricionista, personal trainer, coach...)
**2. Qual seu objetivo principal?** (atrair clientes, vender produtos, gerar leads...)

Pode responder tudo de uma vez! Assim eu crio algo personalizado para suas necessidades espec√≠ficas. üéØ`
    }
    
    const fallbackMessage: Message = {
      id: (Date.now() + 1).toString(),
      type: 'assistant',
      content: fallbackContent,
      timestamp: new Date()
    }
    
    setMessages(prev => [...prev, fallbackMessage])
    setIsTyping(false)
  }

  // Fun√ß√£o para enviar feedback
  const sendFeedback = async (messageId: string, feedback: 'positive' | 'negative') => {
    try {
      await fetch('/api/ylada-learning', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userInput: 'feedback',
          userProfile,
          assistantResponse: { messageId },
          userFeedback: feedback
        })
      })

      // Atualizar mensagem com feedback
      setMessages(prev => prev.map(msg => 
        msg.id === messageId 
          ? { ...msg, feedback }
          : msg
      ))

      console.log(`üìö Feedback ${feedback} enviado para mensagem ${messageId}`)
    } catch (error) {
      console.error('Erro ao enviar feedback:', error)
    }
  }

  return (
    <div className="flex flex-col h-full max-w-4xl mx-auto">
      {/* Header */}
      <div className="bg-white border-b p-4 flex items-center space-x-3">
        <div className="w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center">
          <span className="text-white font-bold text-lg">Y</span>
        </div>
        <div>
          <h3 className="font-semibold text-gray-900">YLADA Assistant</h3>
          <p className="text-sm text-gray-500">Criando sua ferramenta de leads...</p>
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((message) => (
          <div
            key={message.id}
            className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
          >
            <div
              className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                message.type === 'user'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-100 text-gray-900'
              }`}
            >
              <p className="text-sm whitespace-pre-line">{message.content}</p>
              <div className="flex items-center justify-between mt-2">
                <p className="text-xs opacity-70">
                  {message.timestamp.toLocaleTimeString()}
                </p>
                {message.type === 'assistant' && !message.feedback && (
                  <div className="flex space-x-1">
                    <button
                      onClick={() => sendFeedback(message.id, 'positive')}
                      className="text-xs text-green-600 hover:text-green-800 transition-colors"
                      title="Feedback positivo"
                    >
                      üëç
                    </button>
                    <button
                      onClick={() => sendFeedback(message.id, 'negative')}
                      className="text-xs text-red-600 hover:text-red-800 transition-colors"
                      title="Feedback negativo"
                    >
                      üëé
                    </button>
                  </div>
                )}
                {message.feedback && (
                  <span className="text-xs text-gray-500">
                    {message.feedback === 'positive' ? 'üëç' : 'üëé'} Obrigado!
                  </span>
                )}
              </div>
            </div>
          </div>
        ))}
        
        {isTyping && (
          <div className="flex justify-start">
            <div className="bg-gray-100 text-gray-900 px-4 py-2 rounded-lg">
              <div className="flex space-x-1">
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
              </div>
            </div>
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>

      {/* Input */}
      <div className="bg-white border-t p-4">
        <div className="flex space-x-2">
          <input
            type="text"
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
            placeholder="Digite sua resposta..."
            className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
            disabled={isTyping}
          />
          <button
            onClick={handleSendMessage}
            disabled={!inputValue.trim() || isTyping}
            className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {isTyping ? 'Pensando...' : 'Enviar'}
          </button>
        </div>
      </div>
    </div>
  )
}